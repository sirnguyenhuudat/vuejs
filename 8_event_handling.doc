1. Listen to Events
Sử dụng directive v-on để lắng nghe event từ phía DOM
        <button v-on:click="counter += 1">Click</button>
        <p>Bạn vừa click vào button lần thứ {{ counter }}</p>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                counter: 0,
            }
        });
    </script>
v-on:click tương đương với onClick attribute trên tag HTML
2. Method Event Handlers
        <button v-on:click="numberPlus">Click</button>
        <p>Bạn vừa click vào button lần thứ {{ counter }}</p>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                counter: 0,
            },
            methods: {
                numberPlus: function () {
                    this.counter += 1;
                }
            }
        });
    </script>
Cũng có thể truyền tham số vào hàm khi gọi chúng ở DOM(như javascript thuần). Đôi khi muôn sử dụng các thông số mặc định của sự kiện => truyền thêm $event

<button v-on:click="warn('Không thể submit form',$event)">Click</button>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            methods: {
                warn: function (message, event) {
                    if (event) event.preventDefault();
                    alert(message  + '!');
                }
            }
        });
    </script>
3. Event Modifiers
Các modifier được Vue hỗ trợ
.stop			// stopPropagation()
.prevent		// preventDefault()
.capture
.self
.once
.passive

<!-- the click event's propagation will be stopped --> 
<a v-on:click.stop="doThis"></a> 
<!-- the submit event will no longer reload the page --> 
<form v-on:submit.prevent="onSubmit"></form> 
<!-- modifiers can be chained --> 
<a v-on:click.stop.prevent="doThat"></a> 
<!-- just the modifier --> 
<form v-on:submit.prevent></form> 
<!-- use capture mode when adding the event listener --> 
<!-- i.e. an event targeting an inner element is handled here before being handled by that element --> 
<div v-on:click.capture="doThis">...</div> 
<!-- only trigger handler if event.target is the element itself --> 
<!-- i.e. not from a child element --> 
<div v-on:click.self="doThat">...</div>
<!-- the click event will be triggered at most once --> 
<a v-on:click.once="doThis"></a>
<!-- the scroll event's default behavior (scrolling) will happen --> 
<!-- immediately, instead of waiting for `onScroll` to complete --> 
<!-- in case it contains `event.preventDefault()` --> 
<div v-on:scroll.passive="onScroll">...</div>
4. Key modifier
- v-on:keyup.KEY

    <input type="text" v-on:keyup.13="warn">
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            methods: {
                warn: function () {
                    alert('Bạn vừa ấn phím enter');
                }
            }
        });
    </script>
- danh sách các phím Vue đã thêm sẵn(thay cho các KEY)
.enter
.tab
.delete		// delete và backspace
.esc
.space
.up
.down
.left
.right
.ctrl
.alt
.shift
.meta			// window: phím window – mac: phím command
<input type="text" v-on:keyup.enter="warn">
- định nghĩa key code
Vue.config.keyCodes.f1 = 1303;

